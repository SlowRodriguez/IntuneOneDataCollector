<?xml version="1.0" encoding="utf-8"?>
<DataPoints xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:Microsoft.One.DataCollector">
  <Package ID="Intune">
    <Commands>
      <Command Type="PS" Team="General" OutputFileName="dsreg">dsregcmd /status</Command>
      <Command Type="PS" Team="General" OutputFileName="whoami">function RunCommand {
   Param ([string]$cmdToRun)
   
   echo "`r`n===========================================`r`n`t`t $cmdToRun `r`n===========================================`r`n"
   try   { Invoke-Expression($cmdToRun) -ErrorAction Stop }
   catch { $error[0].ToString()}
   
}


RunCommand "whoami"
RunCommand "whoami /upn"  
RunCommand "whoami /all"
RunCommand "whoami /logonid"
RunCommand "whoami /fqdn"</Command>
      <Command Type="PS" Team="General" OutputFileName="dsregcmd-debug.txt">[string]$psexec = ""
if ( Get-Command psexec.exe ) {
    $psexec = $(Get-Command psexec.exe).Source
}
else {
    Invoke-WebRequest https://live.sysinternals.com/psexec.exe -OutFile .\psexec.exe
    $psexec = Join-Path $pwd psexec.exe
    }
 
&amp; "$psexec" -nobanner -accepteula -s -e cmd /c dsregcmd /debug   

</Command>
      <Command Type="CMD" Team="General" OutputFileName="DIR_SystemCenterAdvisor_Agent.txt">dir /s "%programfiles%\System Center Advisor\AgentData\AdvisorMonitor"</Command>
      <Command Type="PS" Team="General" OutputFileName="BasicSystemInfo">Function GetAgeDescription($TimeSpan, [switch] $Localized) {
 $Age = $TimeSpan

 if ($Age.Days -gt 0) 
 {
  $AgeDisplay = $Age.Days.ToString()
  if ($Age.Days -gt 1) 
  {
   if ($Localized.IsPresent)
   {
    $AgeDisplay += " " + $UtilsCTSStrings.ID_Days
   }
   else
   {
    $AgeDisplay += " Days"
   }
  }
  else
  {
   if ($Localized.IsPresent)
   {
    $AgeDisplay += " " + $UtilsCTSStrings.ID_Day
   }
   else
   {
    $AgeDisplay += " Day"
   }
  }
 } 
 else 
 {
  if ($Age.Hours -gt 0) 
  {
   if ($AgeDisplay.Length -gt 0) {$AgeDisplay += " "}
   $AgeDisplay = $Age.Hours.ToString()
   if ($Age.Hours -gt 1)
   {
    if ($Localized.IsPresent)
    {
     $AgeDisplay += " " + $UtilsCTSStrings.ID_Hours
    }
    else
    {
     $AgeDisplay += " Hours"
    }
   }
   else
   {
    if ($Localized.IsPresent)
    {
     $AgeDisplay += " " + $UtilsCTSStrings.ID_Hour
    }
    else
    {
     $AgeDisplay += " Hour"
    }
   }
  }
  if ($Age.Minutes -gt 0) 
  {
   if ($AgeDisplay.Length -gt 0) {$AgeDisplay += " "}
   $AgeDisplay += $Age.Minutes.ToString()
   if ($Age.Minutes -gt 1)
   {
    if ($Localized.IsPresent)
    {
     $AgeDisplay += " " + $UtilsCTSStrings.ID_Minutes
    }
    else
    {
     $AgeDisplay += " Minutes"
    }
   }
   else
   {
    if ($Localized.IsPresent)
    {
     $AgeDisplay += " " + $UtilsCTSStrings.ID_Minute
    }
    else
    {
     $AgeDisplay += " Minute"
    }
   }
  }  
  if ($Age.Seconds -gt 0) 
  {
   if ($AgeDisplay.Length -gt 0) {$AgeDisplay += " "}
   $AgeDisplay += $Age.Seconds.ToString()
   if ($Age.Seconds -gt 1) 
   {
    if ($Localized.IsPresent)
    {
     $AgeDisplay += " " + $UtilsCTSStrings.ID_Seconds
    }
    else
    {
     $AgeDisplay += " Seconds"
    }
   }
   else
   {
    if ($Localized.IsPresent)
    {
     $AgeDisplay += " " + $UtilsCTSStrings.ID_Second
    }
    else
    {
     $AgeDisplay += " Second"
    }
   }
  }
  if (($Age.TotalSeconds -lt 1)) 
  {
   if ($AgeDisplay.Length -gt 0) {$AgeDisplay += " "}
   $AgeDisplay += $Age.TotalSeconds.ToString()
   if ($Localized.IsPresent)
   {
    $AgeDisplay += " " + $UtilsCTSStrings.ID_Seconds
   }
   else
   {
    $AgeDisplay += " Seconds"
   }
  } 
 }
    Return $AgeDisplay
}

$OS_Summary = new-object PSObject                  # Operating System Summary
$CS_Summary = new-object PSObject                  # Computer System Summary

$WMIOS = $null

$error.Clear()

$WMIOS = get-wmiobject -class "win32_operatingsystem"  -ErrorAction SilentlyContinue

if ($Error.Count -ne 0) {
 $errorMessage = $Error[0].Exception.Message
 $errorCode = "0x{0:X}" -f $Error[0].Exception.ErrorCode
 "Error" +  $errorCode + ": $errorMessage connecting to $MachineName" | WriteTo-StdOut
 $Error.Clear()
}

# Get all data from WMI

if ($WMIOS -ne $null) { #if WMIOS is null - means connection failed. Abort script execution.

 $WMICS = get-wmiobject -Class "win32_computersystem"  
 $WMIProcessor = get-wmiobject -Class "Win32_processor"  


 $OSProcessorArch = $WMIOS.OSArchitecture
 $OSProcessorArchDisplay = " " + $OSProcessorArch
 }
 #There is no easy way to detect the OS Architecture on pre-Windows Vista Platform
 if ($OSProcessorArch -eq $null)
 {
  if ($MachineName -eq ".") { #Local Computer
   $OSProcessorArch = $Env:PROCESSOR_ARCHITECTURE
  } else {
   $RemoteReg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey("LocalMachine",$MachineName)
   $OSProcessorArch = ($RemoteReg.OpenSubKey("SYSTEM\CurrentControlSet\Control\Session Manager\Environment")).GetValue("PROCESSOR_ARCHITECTURE")
  }

  if ($OSProcessorArch -ne $null) {
   switch ($OSProcessorArch) {
    "AMD64" {$ProcessorArchDisplay = " (64-bit)"}
    "i386" {$ProcessorArchDisplay = " (32-bit)"}
    "IA64" {$ProcessorArchDisplay = " (64-bit - Itanium)"}
    default {$ProcessorArchDisplay = " ($ProcessorArch)"}
   }
  } else {
   $OSProcessorArchDisplay = ""
  }
 }


 # Build OS Summary
 # Name
 add-member -inputobject $OS_Summary -membertype noteproperty -name "Machine Name" -value $WMIOS.CSName
 add-member -inputobject $OS_Summary -membertype noteproperty -name "OS Name" -value ($WMIOS.Caption + " Service Pack " + $WMIOS.ServicePackMajorVersion + $OSProcessorArchDisplay)
 add-member -inputobject $OS_Summary -membertype noteproperty -name "Build" -value ($WMIOS.Version)
 add-member -inputobject $OS_Summary -membertype noteproperty -name "Time Zone/Offset" -value ((Get-WmiObject -Class Win32_TimeZone).Caption + "/" + $WMIOS.CurrentTimeZone)

 # Install Date
 #$date = [DateTime]::ParseExact($wmios.InstallDate.Substring(0, 8), "yyyyMdd", $null)
 #add-member -inputobject $OS_Summary -membertype noteproperty -name "Install Date" -value $date.ToShortDateString()
 add-member -inputobject $OS_Summary -membertype noteproperty -name "Last Reboot/Uptime" -value ($WMIOS.ConvertToDateTime($WMIOS.LastBootUpTime).ToString() + " (" + (GetAgeDescription(New-TimeSpan $WMIOS.ConvertToDateTime($WMIOS.LastBootUpTime))) + ")")
 
 # Build Computer System Summary
 # Name
 add-member -inputobject $CS_Summary -membertype noteproperty -name "Computer Model" -value $WMICS.model
 
 $numProcs=0
 $ProcessorType = ""
 $ProcessorName = ""
 $ProcessorDisplayName= ""

 foreach ($WMIProc in $WMIProcessor) 
 {
  $ProcessorType = $WMIProc.manufacturer
  switch ($WMIProc.NumberOfCores) 
  {
   1 {$numberOfCores = "single core"}
   2 {$numberOfCores = "dual core"}
   4 {$numberOfCores = "quad core"}
   $null {$numberOfCores = "single core"}
   default { $numberOfCores = $WMIProc.NumberOfCores.ToString() + " core" } 
  }
  
  switch ($WMIProc.Architecture)
  {
   0 {$CpuArchitecture = "x86"}
   1 {$CpuArchitecture = "MIPS"}
   2 {$CpuArchitecture = "Alpha"}
   3 {$CpuArchitecture = "PowerPC"}
   6 {$CpuArchitecture = "Itanium"}
   9 {$CpuArchitecture = "x64"}
  }
  
  if ($ProcessorDisplayName.Length -eq 0)
  {
   $ProcessorDisplayName = " " + $numberOfCores + " $CpuArchitecture processor " + $WMIProc.name
  } else {
   if ($ProcessorName -ne $WMIProc.name) 
   {
    $ProcessorDisplayName += "/ " + " " + $numberOfCores + " $CpuArchitecture processor " + $WMIProc.name
   }
  }
  $numProcs += 1
  $ProcessorName = $WMIProc.name
 }
 $ProcessorDisplayName = "$numProcs" + $ProcessorDisplayName
 
 add-member -inputobject $CS_Summary -membertype noteproperty -name "Processor(s)" -value $ProcessorDisplayName
 
 if ($WMICS.Domain -ne $null) {
  add-member -inputobject $CS_Summary -membertype noteproperty -name "Machine Domain" -value $WMICS.Domain
 }
 
 if ($WMICS.DomainRole -ne $null) {
  switch ($WMICS.DomainRole) {
   0 {$RoleDisplay = "Workstation"}
   1 {$RoleDisplay = "Member Workstation"}
   2 {$RoleDisplay = "Standalone Server"}
   3 {$RoleDisplay = "Member Server"}
   4 {$RoleDisplay = "Backup Domain Controller"}
   5 {$RoleDisplay = "Primary Domain controller"}
  }
  add-member -inputobject $CS_Summary -membertype noteproperty -name "Role" -value $RoleDisplay
 }
 
 if ($WMIOS.ProductType -eq 1) { #Client
  $AntivirusProductWMI = get-wmiobject -query "select companyName, displayName, versionNumber, productUptoDate, onAccessScanningEnabled FROM AntivirusProduct" -Namespace "root\SecurityCenter" 
  if ($AntivirusProductWMI.displayName -ne $null) {
   $AntivirusDisplay= $AntivirusProductWMI.companyName + " " + $AntivirusProductWMI.displayName + " version " + $AntivirusProductWMI.versionNumber
   if ($AntivirusProductWMI.onAccessScanningEnabled) {
    $AVScanEnabled = "Enabled"
   } else {
    $AVScanEnabled = "Disabled"
   }
   if ($AntivirusProductWMI.productUptoDate) {
    $AVUpToDate = "Yes"
   } else {
    $AVUpToDate = "No"
   }
   #$AntivirusStatus = "OnAccess Scan: $AVScanEnabled" + ". Up to date: $AVUpToDate" 
 
   add-member -inputobject $OS_Summary -membertype noteproperty -name "Anti Malware" -value $AntivirusDisplay
  } else {
   $AntivirusProductWMI = get-wmiobject -Namespace root\SecurityCenter2 -Class AntiVirusProduct 
   if ($AntivirusProductWMI -ne $null) {
    add-member -inputobject $OS_Summary -membertype noteproperty -name "AntiMalware" -value $AntivirusProductWMI.displayName
   }
  }
 }
 

  $SystemPolicies = get-itemproperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
  $EnableLUA = $SystemPolicies.EnableLUA
  $ConsentPromptBehaviorAdmin = $SystemPolicies.ConsentPromptBehaviorAdmin

 
 if ($EnableLUA) {
  $UACDisplay = "Enabled"
 
  switch ($ConsentPromptBehaviorAdmin) {
   0 {$UACDisplay += " / UAC Mode:  ID_UACNoPrompt"}
   1 {$UACDisplay += " / UAC Mode:  ID_UACPromptCredentials"}
   2 {$UACDisplay += " / UAC Mode:  ID_UACPromptConsent"}
   5 {$UACDisplay += " / UAC Mode:  ID_UACPromptConsentApp"}
  }
 } else {
  $UACDisplay = "Disabled"
 }
 
 add-member -inputobject $OS_Summary -membertype noteproperty -name "UAC" -value $UACDisplay
 

  add-member -inputobject $OS_Summary -membertype noteproperty -name "Username" -value ($Env:USERDOMAIN + "\" + $Env:USERNAME)

 
 #System Center Advisor Information
 $SCAKey = "HKLM:\SOFTWARE\Microsoft\SystemCenterAdvisor"
 if (Test-Path($SCAKey))
 {
  $CustomerID = (Get-ItemProperty -Path $SCAKey).CustomerID
  if ($CustomerID -ne $null)
  {
   "System Center Advisor detected. Customer ID: $CustomerID" | writeto-stdout
   $SCA_Summary = New-Object PSObject
   $SCA_Summary | add-member -membertype noteproperty -name "Customer ID" -value $CustomerID
   $SCA_Summary | ConvertTo-Xml2 | update-diagreport -id ("01_SCACustomerSummary") -name "System Center Advisor" -verbosity Informational
  }  
 }

 # Add-Member -InputObject $CS_Summary -MemberType NoteProperty -name "RAM (physical)" -value (FormatBytes -bytes $WMICS.TotalPhysicalMemory -precision 1)
 $OS_Summary | fl
 $CS_Summary | fl </Command>
      <Command Type="CMD" Team="General" OutputFileName="Installed_Products.txt">wmic product list brief </Command>
      <Command Type="CMD" Team="General" OutputFileName="proxy_settings.txt">netsh winhttp show proxy</Command>
      <Command Type="PS" Team="General" OutputFileName="Firewall_Settings">function RunCommand {
   Param ([string]$cmdToRun)
   
   echo "`r`n===========================================`r`n`t`t $cmdToRun `r`n===========================================`r`n"
   try   { Invoke-Expression($cmdToRun) -ErrorAction Stop }
   catch { $error[0].ToString()}
   
}



RunCommand "netsh advfirewall show allprofiles"
RunCommand "netsh advfirewall show allprofiles"
RunCommand  "netsh advfirewall show global"</Command>
      <Command Type="CMD" Team="Antimalware" OutputFileName="mpcmdrun_output">"%programfiles%\Microsoft Security Client\MPCmdRun.exe" -GetFiles</Command>
      <Command Type="PS" Team="General" OutputFileName="NA">$outputPath = "$env:temp\CollectedData\Intune\Commands\General"
$x = if (-not (Test-Path $outputPath)) { mkdir $outputPath -force}
   &amp; msinfo32.exe /nfo "$outputPath\msinfo32.nfo" /report "$outputPath\msinfo32.txt"</Command>
      <Command Type="PS" Team="Networking" OutputFileName="Networking.txt">function RunCommand {
   Param ([string]$cmdToRun)
   
   echo "`r`n===========================================`r`n`t`t $cmdToRun `r`n===========================================`r`n"
   try   { Invoke-Expression($cmdToRun) -ErrorAction Stop }
   catch { $error[0].ToString()}
   
}

RunCommand -cmdToRun "hostname" 
RunCommand -cmdToRun "ipconfig /all" 
RunCommand -cmdToRun "arp -a" 
RunCommand -cmdToRun "nbtstat -n" 
RunCommand -cmdToRun "netstat -ano" 
RunCommand -cmdToRun "netstat -anob" 
RunCommand -cmdToRun "reg.exe query HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters /v EnableTCPChimney" 
RunCommand -cmdToRun "reg.exe query HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters /v EnableRSS" 
RunCommand -cmdToRun "reg.exe query HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters /v EnableTCPA" 
RunCommand -cmdToRun "reg.exe query HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters /v DisableTaskOffload" 
if ($OSVersion.Major -ge 6)
{
 RunCommand -cmdToRun "netsh int tcp show global" 
 RunCommand -cmdToRun "netsh int ipv4 show offload" 
 RunCommand -cmdToRun "netstat -nato -p tcp" -FileDescription "TCP/IP Basic Information"  -CollectFile $true
}
else
{
 RunCommand -cmdToRun "netstat -ano -p tcp"
}



 RunCommand -cmdToRun "net config workstation" 

if ((Get-Service "lanmanserver").Status -eq 'Running')
{
 RunCommand -cmdToRun "net config server" 
 RunCommand -cmdToRun "net share" 
 RunCommand -cmdToRun "net statistics server" 
}

RunCommand -cmdToRun "net sessions" 
RunCommand -cmdToRun "net use" 
RunCommand -cmdToRun "net accounts" 
RunCommand -cmdToRun "net statistics workstation"   </Command>
      <Command Type="PS" Team="General" OutputFileName="sym_Process.txt">Get-Process | select Name, FileVersion, Path, ProductVersion | ft -auto -wrap</Command>
      <Command Type="PS" Team="General" OutputFileName="sym_drivers.txt">Get-WmiObject Win32_PnPSignedDriver| select DeviceName, DriverVersion</Command>
      <Command Type="PS" Team="General" OutputFileName="sym_SysWOW64_sys_Drivers.txt">get-childitem $env:windir\syswow64\drivers -recurse -file | select DeviceName, DriverVersion</Command>
      <Command Type="PS" Team="General" OutputFileName="sym_RunningDrivers.txt">Get-WmiObject Win32_PnPSignedDriver | select DeviceName, DriverVersion | ft -auto</Command>
      <Command Type="CMD" Team="General" OutputFileName="ScheduledTasks">schtasks.exe /Query</Command>
      <Command Type="PS" Team="General" OutputFileName="NA">$outputPath = "$env:temp\CollectedData\Intune\Commands\General"
Get-WindowsUpdateLog -Logpath $outputPath\WindowsUpdate.log</Command>
      <Command Type="CMD" Team="General" OutputFileName="GPResult.txt">gpresult.exe /V</Command>
      <Command Type="PS" Team="General" OutputFileName="InstalledWindowsFeatures">Get-WindowsOptionalFeature -Online | where {$_.State -eq "Enabled"}</Command>
      <Command Type="PS" Team="Networking" OutputFileName="NetSH_Commands">echo "======= netsh int show int ======"
netsh int show int

echo "======= netsh int ipv4 show int ======"
netsh int ipv4 show int

echo "======= netsh int ipv4 show addresses ======"
netsh int ipv4 show addresses

echo "======= netsh int ipv4 show ipaddresses ======"
netsh int ipv4 show ipaddresses

echo "======= netsh int ipv4 show compartments ======"
netsh int ipv4 show compartments

echo "======= netsh int ipv4 show dnsservers ======"
netsh int ipv4 show dnsservers

echo "======= netsh int ipv4 show winsservers ======"
netsh int ipv4 show winsservers

echo "======= netsh int ipv4 show dynamicportrange tcp ======"
netsh int ipv4 show dynamicportrange tcp

echo "======= netsh int ipv4 show dynamicportrange udp ======"
netsh int ipv4 show dynamicportrange udp

echo "======= netsh int ipv4 show global ======"
netsh int ipv4 show global

echo "======= netsh int ipv4 show icmpstats ======"
netsh int ipv4 show icmpstats

echo "======= netsh int ipv4 show ipstats ======"
netsh int ipv4 show ipstats

echo "======= netsh int ipv4 show joins ======"
netsh int ipv4 show joins

echo "======= netsh int ipv4 show offload ======"
netsh int ipv4 show offload

echo "======= netsh int ipv4 show route ======"
netsh int ipv4 show route

echo "======= netsh int ipv4 show subint ======"
netsh int ipv4 show subint

echo "======= netsh int ipv4 show tcpconnections ======"
netsh int ipv4 show tcpconnections

echo "======= netsh int ipv4 show tcpstats ======"
netsh int ipv4 show tcpstats

echo "======= netsh int ipv4 show udpconnections ======"
netsh int ipv4 show udpconnections

echo "======= netsh int ipv4 show udpstats ======"
netsh int ipv4 show udpstats

echo "======= netsh int ipv4 show destinationcache ======"
netsh int ipv4 show destinationcache

echo "======= netsh int ipv4 show ipnettomedia ======"
netsh int ipv4 show ipnettomedia

echo "======= netsh int ipv4 show neighbors ======"
netsh int ipv4 show neighbors

</Command>
      <Command Type="PS" Team="Devices" OutputFileName="Get-WindowsAutoPilotInfo.txt">&lt;#PSScriptInfo

.VERSION 1.3

.GUID ebf446a3-3362-4774-83c0-b7299410b63f

.AUTHOR Michael Niehaus

.COMPANYNAME Microsoft

.COPYRIGHT 

.TAGS Windows AutoPilot

.LICENSEURI 

.PROJECTURI 

.ICONURI 

.EXTERNALMODULEDEPENDENCIES 

.REQUIREDSCRIPTS 

.EXTERNALSCRIPTDEPENDENCIES 

.RELEASENOTES
Version 1.0:  Original published version.
Version 1.1:  Added -Append switch.
Version 1.2:  Added -Credential switch.
Version 1.3:  Added -Partner switch.

#&gt;

&lt;#
.SYNOPSIS
Retrieves the Windows AutoPilot deployment details from one or more computers
.DESCRIPTION
This script uses WMI to retrieve properties needed by the Microsoft Store for Business to support Windows AutoPilot deployment.
.PARAMETER Name
The names of the computers.  These can be provided via the pipeline (property name Name or one of the available aliases, DNSHostName, ComputerName, and Computer).
.PARAMETER OutputFile
The name of the CSV file to be created with the details for the computers.  If not specified, the details will be returned to the PowerShell
pipeline.
.PARAMETER Append
Switch to specify that new computer details should be appended to the specified output file, instead of overwriting the existing file.
.PARAMETER Credential
Credentials that should be used when connecting to a remote computer (not supported when gathering details from the local computer).
.PARAMETER Partner
Switch to specify that the created CSV file should use the schema for Partner Center (using serial number, make, and model).
.EXAMPLE
.\Get-WindowsAutoPilotInfo.ps1 -ComputerName MYCOMPUTER -OutputFile .\MyComputer.csv
.EXAMPLE
.\Get-WindowsAutoPilotInfo.ps1 -ComputerName MYCOMPUTER -OutputFile .\MyComputer.csv -Append
.EXAMPLE
.\Get-WindowsAutoPilotInfo.ps1 -ComputerName MYCOMPUTER1,MYCOMPUTER2 -OutputFile .\MyComputers.csv
.EXAMPLE
Get-ADComputer -Filter * | .\GetWindowsAutoPilotInfo.ps1 -OutputFile .\MyComputers.csv
.EXAMPLE
Get-CMCollectionMember -CollectionName "All Systems" | .\GetWindowsAutoPilotInfo.ps1 -OutputFile .\MyComputers.csv
.EXAMPLE
.\Get-WindowsAutoPilotInfo.ps1 -ComputerName MYCOMPUTER1,MYCOMPUTER2 -OutputFile .\MyComputers.csv -Partner

#&gt;

Function Get-WindowsAutoPilotInfo {

[CmdletBinding()]
param(
 [Parameter(Mandatory=$False,ValueFromPipeline=$True,ValueFromPipelineByPropertyName=$True,Position=0)][alias("DNSHostName","ComputerName","Computer")] [String[]] $Name = @($env:ComputerName),
 [Parameter(Mandatory=$False)] [String] $OutputFile = "", 
 [Parameter(Mandatory=$False)] [Switch] $Append = $false,
 [Parameter(Mandatory=$False)] [System.Management.Automation.PSCredential] $Credential = $null,
 [Parameter(Mandatory=$False)] [Switch] $Partner = $false,
 [Parameter(Mandatory=$False)] [Switch] $Force = $false
)

Begin
{
 # Initialize empty list
 $computers = @()
}

Process
{
 foreach ($comp in $Name)
 {
  $bad = $false

  # Get the common properties.
  Write-Verbose "Checking $comp"
  $serial = (Get-WmiObject -ComputerName $comp -Credential $Credential -Class Win32_BIOS).SerialNumber

  # Get the hash (if available)
  $devDetail = (Get-WMIObject -ComputerName $comp -Credential $Credential -Namespace root/cimv2/mdm/dmmap -Class MDM_DevDetail_Ext01 -Filter "InstanceID='Ext' AND ParentID='./DevDetail'")
  if ($devDetail -and (-not $Force))
  {
   $hash = $devDetail.DeviceHardwareData
  }
  else
  {
   $bad = $true
   $hash = ""
  }

  # If the hash isn't available, get the make and model
  if ($bad -or $Force)
  {
   $cs = Get-WmiObject -ComputerName $comp -Credential $Credential -Class Win32_ComputerSystem
   $make = $cs.Manufacturer.Trim()
   $model = $cs.Model.Trim()
   if ($Partner)
   {
    $bad = $false
   }
  }
  else
  {
   $make = ""
   $model = ""
  }

  # Getting the PKID is generally problematic for anyone other than OEMs, so let's skip it here
  $product = ""

  # Depending on the format requested, create the necessary object
  if ($Partner)
  {
   # Create a pipeline object
   $c = New-Object psobject -Property @{
    "Device Serial Number" = $serial
    "Windows Product ID" = $product
    "Hardware Hash" = $hash
    "Manufacturer name" = $make
    "Device model" = $model
   }
   # From spec:
   # "Manufacturer Name" = $make
   # "Device Name" = $model

  }
  else
  {
   # Create a pipeline object
   $c = New-Object psobject -Property @{
    "Device Serial Number" = $serial
    "Windows Product ID" = $product
    "Hardware Hash" = $hash
   }
  }

  # Write the object to the pipeline or array
  if ($bad)
  {
   # Report an error when the hash isn't available
   Write-Error -Message "Unable to retrieve device hardware data (hash) from computer $comp" -Category DeviceError
  }
  elseif ($OutputFile -eq "")
  {
   $c
  }
  else
  {
   $computers += $c
  }

 }
}

End
{
 if ($OutputFile -ne "")
 {
  if ($Append)
  {
   if (Test-Path $OutputFile)
   {
    $computers += Import-CSV -Path $OutputFile
   }
  }
  if ($Partner)
  {
   $computers | Select "Device Serial Number", "Windows Product ID", "Hardware Hash", "Manufacturer name", "Device model" | ConvertTo-CSV -NoTypeInformation | % {$_ -replace '"',''} | Out-File $OutputFile
   # From spec:
   # $computers | Select "Device Serial Number", "Windows Product ID", "Hardware Hash", "Manufacturer Name", "Device Name" | ConvertTo-CSV -NoTypeInformation | % {$_ -replace '"',''} | Out-File $OutputFile
  }
  else
  {
   $computers | Select "Device Serial Number", "Windows Product ID", "Hardware Hash" | ConvertTo-CSV -NoTypeInformation | % {$_ -replace '"',''} | Out-File $OutputFile
  }
 }
}
}

# only run on workstation
if ( ($osInfo = Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {
    Get-WindowsAutoPilotInfo | ft -wrap -AutoSize
    }</Command>
      <Command Type="PS" Team="Networking" OutputFileName="Connectivity_tests">$uniqueURLs = (dsregcmd /status) | ForEach-Object { if ($_ -match ".*https://(\w+.+?)\/") { $matches[1]} } | Get-Unique
$uniqueURLs  | ForEach-Object  { Test-NetConnection -Port 443 $_}
</Command>
      <Command Type="PS" Team="General" OutputFileName="TimeZoneSettings">w32tm /tz</Command>
      <Command Type="PS" Team="NDES" OutputFileName="NA">function Get-FilesOlderThan
    {
    Param ([int]$days = 2,
           [string]$path = $pwd
           )

    $DaysAgo = (Get-Date).AddDays(-($days))
    $files = @()
    $files = Get-ChildItem $path | where { $_.CreationTime -gt $DaysAgo }
 
    # get latest file if none meet our criteria
    if ((Test-Path $path) -and (-not $files) ) {
       $newestFile = Get-ChildItem $path |Sort-Object LastAccessTime -Descending | Select-Object -First 1
       $files += $newestFile
    }

    $files
    }



$installFolder = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\MicrosoftIntune\NDESConnector).InstallFolder
$copyPath = "$env:temp\CollectedData\Intune\Files\NDES"

if ($installFolder) {

    $ndesPaths = @(
        "$installFolder\NDESPolicyModule\Logs\NDESPlugin.log",
        "$installFolder\NDESConnectorSvc\Logs\Logs\NDESConnector*",
        "$installFolder\NDESConnectorSvc\Logs\Logs\CertificateRegistrationPoint*",
        "$installFolder\NDESConnectorUI\NDESConnectorUI.log",        "$installFolder\NDESConnectorUI\Logs\*",        "C:\inetpub\logs\LogFiles\W3SVC1\u_ex*.log"        "$installFolder\NDESPolicyModule\Logs\NDESPlugin.log",        "C:\NDESConnectorSetup\*.log",        "$env:programfiles\Microsoft Configuration Manager\logs\ndes*"
         )

    
    if (-not(test-path $copyPath) ) { $x = mkdir $copyPath -Force }

    ForEach ($ndesPath in $ndesPaths) {

        if (Test-Path $ndesPath) {
            $filesToCollect = Get-FilesOlderThan -path $ndesPath -days 3
            foreach ($fileToCollect in $filesToCollect) { copy $fileToCollect $copyPath}
            }


    }
    copy "C:\NDESConnectorSetupMSI\*" $copyPath

}</Command>
      <Command Type="PS" Team="NDES" OutputFileName="certificate_authority.txt">
Trap [Exception]
{
   $Script:ExceptionMessage = $_
   "[info]: Exception occurred."   
   "[info]: Exception.Message $ExceptionMessage."   
   $Error
   $Error.Clear()
   continue
 }

</Command>
    </Commands>
    <EventLogs>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\System.evtx</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\Application.evtx</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\Security.evtx</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\*devicemanagement*</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\*powershell*</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\*workplace*</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\*user*device*</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\*operations*</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\*momlog*</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\*AAD*.evtx</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\Microsoft-Windows-User Device Registration*.evtx</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\Microsoft-Windows-Provisioning-*</EventLog>
      <EventLog Team="Event Log">%windir%\System32\Winevt\Logs\Microsoft-Windows-DeviceSetupManager*</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\*appx*</EventLog>
      <EventLog Team="Event Log">%windir%\System32\Winevt\Logs\Microsoft-Windows-Shell-Core%4Operational.evtx</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\*autopilot*</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\*intune*</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\*bitlocker*</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\Microsoft-Windows-Shell-Core%4Operational.evtx</EventLog>
      <EventLog Team="Event Log">%windir%\system32\winevt\logs\*workplace*join*</EventLog>
    </EventLogs>
    <Files>
      <File Team="Advisor">"%programfiles%\System Center Advisor\AgentData\Logs\*"</File>
      <File Team="Advisor">"%programfiles%\System Center Advisor\GatewayData\Logs\*.*"</File>
      <File Team="General">%programfiles%\Microsoft\OnlineManagement\PolicyAgent\ReportCache\3DA21691-E39D-4DA6-8A4B-B43877BCB1B7\*.xml"</File>
      <File Team="Antimalware">"%programfiles%\Microsoft Antimalware\Support\*.*"</File>
      <File Team="Antimalware">"%programdata%\Microsoft\Microsoft Antimalware\Support\*.cab"</File>
      <File Team="Antimalware">"%ALLUSERSPROFILE%\Microsoft\Microsoft Antimalware\Support\*.cab"</File>
      <File Team="CBS">%windir%\Logs\CBS\*.log</File>
      <File Team="Intune">%LOCALAPPDATA%\Microsoft\Windows\clientui.log</File>
      <File Team="Intune">%LOCALAPPDATA%\Microsoft\OnlineManagement\Logs\clientui.log</File>
      <File Team="Intune">%TEMP%\clientui.log</File>
      <File Team="Configmgr">%SMS_LOG_PATH%\*.*</File>
      <File Team="DirSync">"%programfiles%\Microsoft Online Directory Sync\*.log"</File>
      <File Team="General">%temp%\supportconsole*.*</File>
      <File Team="Exchange Connector">"%programdata%\Microsoft\Windows Intune Exchange Connector\*.*"</File>
      <File Team="General">%LOCALAPPDATA%\Temp\*.log"</File>
      <File Team="Exchange Connector">"%programdata%\Microsoft\Windows Intune Exchange Connector\Logs\*.*"</File>
      <File Team="Homegroup">%windir%\Logs\HomeGroup\*.*</File>
      <File Team="General">%windir%\PolicyClient*.log</File>
      <File Team="MSI Logs">%windir%\temp\MSI*.*</File>
      <File Team="MSI Logs">%temp%\MSI*.*</File>
      <File Team="OpsMgr">%windir%\Temp\OpsMgrTrace\*.*</File>
      <File Team="Intune">"%programfiles%\microsoft policy platform\policyplatformclient*.log"</File>
      <File Team="General">%windir%\SoftwareDistribution\ReportingEvents*.log</File>
      <File Team="Intune">%Temp%\SoftwarePublishing\*.log</File>
      <File Team="Intune">%windir%\scoconnector.etl</File>
      <File Team="Intune">%programfiles%\Microsoft\OnlineManagement\Logs\*.log</File>
      <File Team="Intune">%programfiles\%Microsoft\OnlineManagement\PolicyAgent\InventoryCache\3DA21691-E39D-4DA6-8A4B-B43877BCB1B7\*.xml</File>
      <File Team="Intune">%programfiles%\Microsoft\OnlineManagement\PolicyAgent\ReportCache\3DA21691-E39D-4DA6-8A4B-B43877BCB1B7\*.xml</File>
      <File Team="WMI">%windir%\system32\wbem\logs\*.*</File>
      <File Team="WMI">%windir%\system32\wbem\tmf\*.*</File>
      <File Team="Windows Update">%windir%\windowsupdate*.log</File>
      <File Team="General">%ProgramData%\Microsoft\IntuneManagementExtension\Logs\*</File>
      <File Team="General">%programdata%\microsoft\diagnosticlogcsp\collectors\*</File>
      <File Team="Intune">%public%\Documents\MDMDiagnostics\*</File>
      <File Team="NDES">"%programfiles%\Microsoft Intune\NDESConnectorUI\NDESConnectorUI.log"</File>
      <File Team="NDES">"%programfiles%\Microsoft Intune\NDESConnectorSvc\logs\logs\*"</File>
      <File Team="NDES">"%programfiles%\Microsoft Intune\NDESConnectorUI\Logs\*"</File>
      <File Team="NDES">C:\inetpub\logs\LogFiles\W3SVC1\u_ex*.log </File>
      <File Team="NDES">"%programfiles%\Microsoft Intune\NDESPolicyModule\Logs\NDESPlugin.log"</File>
      <File Team="NDES">C:\NDESConnectorSetup\*.log</File>
      <File Team="NDES">*%programfiles%\Microsoft Configuration Manager\logs\ndes*"</File>
      <File Team="Sidecar">"%ProgramData%\Microsoft\Intune Management Extension\Logs\*"</File>
    </Files>
    <Registries>
      <Registry Team="Registry" OutputFileName="REG_MicrosoftAntimalware.TXT">HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Microsoft Antimalware</Registry>
      <Registry Team="Registry" OutputFileName="REG_Wow6432Node-MicrosoftAntimalware.TXT">HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Policies\Microsoft\Microsoft Antimalware</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-Windows-Installer">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\UserData\S-1-5-18</Registry>
      <Registry Team="Registry" OutputFileName="REG_IntuneManagementExtension">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\IntuneManagementExtension</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-SystemCenterAdvisor-atlregistry">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SystemCenterAdvisor</Registry>
      <Registry Team="Registry" OutputFileName="REG_Updates.TXT">HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\windows\WindowsUpdate</Registry>
      <Registry Team="Registry" OutputFileName="REG_Updates_SW_Microsoft_Updates">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Updates</Registry>
      <Registry Team="Registry" OutputFileName="REG_WOW64_Policies_Microsoft_Windows_WindowsUpdate">HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Policies\Microsoft\Windows\WindowsUpdate</Registry>
      <Registry Team="Registry" OutputFileName="REG_PolicyAgent">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\OnlineManagement\PolicyAgent</Registry>
      <Registry Team="Registry" OutputFileName="REG_HKLM_SW_Microsoft_PolicyPlatform">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PolicyPlatform</Registry>
      <Registry Team="Registry" OutputFileName="REG_WOW64_Policies_Microsoft_OnlineManagement_PolicyAgent">HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Policies\Microsoft\OnlineManagement\PolicyAgent</Registry>
      <Registry Team="Registry" OutputFileName="REG_SCOCertificates">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SystemCertificates\System Center Online Client</Registry>
      <Registry Team="Registry" OutputFileName="REG_SYSTEM-CCS-Control-TimeZone">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW_Microsoft_WindowsNT_CV_TimeZones">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones</Registry>
      <Registry Team="Registry" OutputFileName="REG_Embedded">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ProductOptions\ProductSuite</Registry>
      <Registry Team="Registry" OutputFileName="REG_CSDVersion">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Windows\CSDVersion</Registry>
      <Registry Team="Registry" OutputFileName="REG_WindowsEmbedded_ProductVersion">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\WindowsEmbedded\ProductVersion</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-WEPOS-Version">HKEY_LOCAL_MACHINE\Software\Microsoft\WEPOS\Version</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-POSReady">HKEY_LOCAL_MACHINE\Software\Microsoft\POSReady</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-OnlineManagement">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\OnlineManagement</Registry>
      <Registry Team="Registry" OutputFileName="REG_OpsMgrR2Agent">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft Operations Manager</Registry>
      <Registry Team="Registry" OutputFileName="REG_FEPInstallKeys">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Installer\UserData\S-1-5-18</Registry>
      <Registry Team="Registry" OutputFileName="REG_Windows-CV-Uninstall">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-Enrollments">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Enrollments</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-Windows-Enrollments">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Enrollments</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-Enrollments">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Enrollments</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-PolicyManager">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PolicyManager</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-MicrosoftIntune">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MicrosoftIntune</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-EnterpriseDesktopAppManagement">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\EnterpriseDesktopAppManagement</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Policies-Microsoft-Windows-Appx">HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\Appx</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-Provisioning-NodeCache-CSP">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Provisioning\NodeCache\CSP</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-enterprisemodernappmanagement">HKEY_LOCAL_MACHINE\SOFTWARE\microsoft\enterprisemodernappmanagement</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-Windows-assignedaccessconfiguration">HKEY_LOCAL_MACHINE\SOFTWARE\microsoft\windows\assignedaccessconfiguration</Registry>
      <Registry Team="Registry" OutputFileName="REG_policymanager">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\policymanager</Registry>
      <Registry Team="Registry" OutputFileName="REG_provisioning">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\provisioning</Registry>
      <Registry Team="Registry" OutputFileName="REG_multivariant">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\multivariant</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-MSFT-windows-assignedaccessconfiguration">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\windows\assignedaccessconfiguration</Registry>
      <Registry Team="Registry" OutputFileName="REG_assignedaccesscsp">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\windows\assignedaccesscsp</Registry>
      <Registry Team="General" OutputFileName="REG_SW-Policies-Microsoft-Windows-CV-MDM">HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\MDM</Registry>
      <Registry Team="Registry" OutputFileName="REG_CCS_Services_Crypt32">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\crypt32</Registry>
      <Registry Team="Registry" OutputFileName="REG_SYSTEM_CCS_services_CryptSvc">HKEY_LOCAL_MACHINE\SYSTEM\SYSTEM\CurrentControlSet\services\CryptSvc</Registry>
      <Registry Team="Registry" OutputFileName="REG_CCS_services_CertPropSvc">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\CertPropSvc</Registry>
      <Registry Team="Registry" OutputFileName="REG_CCS_services_SCardSvr">HKEY_LOCAL_MACHINE\HKLM\SYSTEM\CurrentControlSet\services\SCardSvr</Registry>
      <Registry Team="Registry" OutputFileName="REG_CCS_services_SCPolicySvc">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\SCPolicySvc</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-Providsioning-Diagnostics-Autopilot">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Provisioning\Diagnostics\AutoPilot</Registry>
      <Registry Team="Registry" OutputFileName="REG_SW-Microsoft-DotNetFW-v4">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319</Registry>
      <Registry Team="General" OutputFileName="REG_SW-Microsoft-OfficeCSP">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\OfficeCSP</Registry>
    </Registries>
  </Package>
</DataPoints>